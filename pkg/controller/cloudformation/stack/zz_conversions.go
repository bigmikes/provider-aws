/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package stack

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/cloudformation"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/cloudformation/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeStacksInput returns input for read
// operation.
func GenerateDescribeStacksInput(cr *svcapitypes.Stack) *svcsdk.DescribeStacksInput {
	res := &svcsdk.DescribeStacksInput{}

	if cr.Spec.ForProvider.StackName != nil {
		res.SetStackName(*cr.Spec.ForProvider.StackName)
	}

	return res
}

// GenerateStack returns the current state in the form of *svcapitypes.Stack.
func GenerateStack(resp *svcsdk.DescribeStacksOutput) *svcapitypes.Stack {
	cr := &svcapitypes.Stack{}

	found := false
	for _, elem := range resp.Stacks {
		if elem.Capabilities != nil {
			f0 := []*string{}
			for _, f0iter := range elem.Capabilities {
				var f0elem string
				f0elem = *f0iter
				f0 = append(f0, &f0elem)
			}
			cr.Spec.ForProvider.Capabilities = f0
		} else {
			cr.Spec.ForProvider.Capabilities = nil
		}
		if elem.DisableRollback != nil {
			cr.Spec.ForProvider.DisableRollback = elem.DisableRollback
		} else {
			cr.Spec.ForProvider.DisableRollback = nil
		}
		if elem.EnableTerminationProtection != nil {
			cr.Spec.ForProvider.EnableTerminationProtection = elem.EnableTerminationProtection
		} else {
			cr.Spec.ForProvider.EnableTerminationProtection = nil
		}
		if elem.NotificationARNs != nil {
			f9 := []*string{}
			for _, f9iter := range elem.NotificationARNs {
				var f9elem string
				f9elem = *f9iter
				f9 = append(f9, &f9elem)
			}
			cr.Spec.ForProvider.NotificationARNs = f9
		} else {
			cr.Spec.ForProvider.NotificationARNs = nil
		}
		if elem.Parameters != nil {
			f11 := []*svcapitypes.Parameter{}
			for _, f11iter := range elem.Parameters {
				f11elem := &svcapitypes.Parameter{}
				if f11iter.ParameterKey != nil {
					f11elem.ParameterKey = f11iter.ParameterKey
				}
				if f11iter.ParameterValue != nil {
					f11elem.ParameterValue = f11iter.ParameterValue
				}
				if f11iter.ResolvedValue != nil {
					f11elem.ResolvedValue = f11iter.ResolvedValue
				}
				if f11iter.UsePreviousValue != nil {
					f11elem.UsePreviousValue = f11iter.UsePreviousValue
				}
				f11 = append(f11, f11elem)
			}
			cr.Spec.ForProvider.Parameters = f11
		} else {
			cr.Spec.ForProvider.Parameters = nil
		}
		if elem.RoleARN != nil {
			cr.Spec.ForProvider.RoleARN = elem.RoleARN
		} else {
			cr.Spec.ForProvider.RoleARN = nil
		}
		if elem.RollbackConfiguration != nil {
			f14 := &svcapitypes.RollbackConfiguration{}
			if elem.RollbackConfiguration.MonitoringTimeInMinutes != nil {
				f14.MonitoringTimeInMinutes = elem.RollbackConfiguration.MonitoringTimeInMinutes
			}
			if elem.RollbackConfiguration.RollbackTriggers != nil {
				f14f1 := []*svcapitypes.RollbackTrigger{}
				for _, f14f1iter := range elem.RollbackConfiguration.RollbackTriggers {
					f14f1elem := &svcapitypes.RollbackTrigger{}
					if f14f1iter.Arn != nil {
						f14f1elem.ARN = f14f1iter.Arn
					}
					if f14f1iter.Type != nil {
						f14f1elem.Type = f14f1iter.Type
					}
					f14f1 = append(f14f1, f14f1elem)
				}
				f14.RollbackTriggers = f14f1
			}
			cr.Spec.ForProvider.RollbackConfiguration = f14
		} else {
			cr.Spec.ForProvider.RollbackConfiguration = nil
		}
		if elem.StackId != nil {
			cr.Status.AtProvider.StackID = elem.StackId
		} else {
			cr.Status.AtProvider.StackID = nil
		}
		if elem.StackName != nil {
			cr.Spec.ForProvider.StackName = elem.StackName
		} else {
			cr.Spec.ForProvider.StackName = nil
		}
		if elem.Tags != nil {
			f20 := []*svcapitypes.Tag{}
			for _, f20iter := range elem.Tags {
				f20elem := &svcapitypes.Tag{}
				if f20iter.Key != nil {
					f20elem.Key = f20iter.Key
				}
				if f20iter.Value != nil {
					f20elem.Value = f20iter.Value
				}
				f20 = append(f20, f20elem)
			}
			cr.Spec.ForProvider.Tags = f20
		} else {
			cr.Spec.ForProvider.Tags = nil
		}
		if elem.TimeoutInMinutes != nil {
			cr.Spec.ForProvider.TimeoutInMinutes = elem.TimeoutInMinutes
		} else {
			cr.Spec.ForProvider.TimeoutInMinutes = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateStackInput returns a create input.
func GenerateCreateStackInput(cr *svcapitypes.Stack) *svcsdk.CreateStackInput {
	res := &svcsdk.CreateStackInput{}

	if cr.Spec.ForProvider.Capabilities != nil {
		f0 := []*string{}
		for _, f0iter := range cr.Spec.ForProvider.Capabilities {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		res.SetCapabilities(f0)
	}
	if cr.Spec.ForProvider.ClientRequestToken != nil {
		res.SetClientRequestToken(*cr.Spec.ForProvider.ClientRequestToken)
	}
	if cr.Spec.ForProvider.DisableRollback != nil {
		res.SetDisableRollback(*cr.Spec.ForProvider.DisableRollback)
	}
	if cr.Spec.ForProvider.EnableTerminationProtection != nil {
		res.SetEnableTerminationProtection(*cr.Spec.ForProvider.EnableTerminationProtection)
	}
	if cr.Spec.ForProvider.NotificationARNs != nil {
		f4 := []*string{}
		for _, f4iter := range cr.Spec.ForProvider.NotificationARNs {
			var f4elem string
			f4elem = *f4iter
			f4 = append(f4, &f4elem)
		}
		res.SetNotificationARNs(f4)
	}
	if cr.Spec.ForProvider.OnFailure != nil {
		res.SetOnFailure(*cr.Spec.ForProvider.OnFailure)
	}
	if cr.Spec.ForProvider.Parameters != nil {
		f6 := []*svcsdk.Parameter{}
		for _, f6iter := range cr.Spec.ForProvider.Parameters {
			f6elem := &svcsdk.Parameter{}
			if f6iter.ParameterKey != nil {
				f6elem.SetParameterKey(*f6iter.ParameterKey)
			}
			if f6iter.ParameterValue != nil {
				f6elem.SetParameterValue(*f6iter.ParameterValue)
			}
			if f6iter.ResolvedValue != nil {
				f6elem.SetResolvedValue(*f6iter.ResolvedValue)
			}
			if f6iter.UsePreviousValue != nil {
				f6elem.SetUsePreviousValue(*f6iter.UsePreviousValue)
			}
			f6 = append(f6, f6elem)
		}
		res.SetParameters(f6)
	}
	if cr.Spec.ForProvider.ResourceTypes != nil {
		f7 := []*string{}
		for _, f7iter := range cr.Spec.ForProvider.ResourceTypes {
			var f7elem string
			f7elem = *f7iter
			f7 = append(f7, &f7elem)
		}
		res.SetResourceTypes(f7)
	}
	if cr.Spec.ForProvider.RoleARN != nil {
		res.SetRoleARN(*cr.Spec.ForProvider.RoleARN)
	}
	if cr.Spec.ForProvider.RollbackConfiguration != nil {
		f9 := &svcsdk.RollbackConfiguration{}
		if cr.Spec.ForProvider.RollbackConfiguration.MonitoringTimeInMinutes != nil {
			f9.SetMonitoringTimeInMinutes(*cr.Spec.ForProvider.RollbackConfiguration.MonitoringTimeInMinutes)
		}
		if cr.Spec.ForProvider.RollbackConfiguration.RollbackTriggers != nil {
			f9f1 := []*svcsdk.RollbackTrigger{}
			for _, f9f1iter := range cr.Spec.ForProvider.RollbackConfiguration.RollbackTriggers {
				f9f1elem := &svcsdk.RollbackTrigger{}
				if f9f1iter.ARN != nil {
					f9f1elem.SetArn(*f9f1iter.ARN)
				}
				if f9f1iter.Type != nil {
					f9f1elem.SetType(*f9f1iter.Type)
				}
				f9f1 = append(f9f1, f9f1elem)
			}
			f9.SetRollbackTriggers(f9f1)
		}
		res.SetRollbackConfiguration(f9)
	}
	if cr.Spec.ForProvider.StackName != nil {
		res.SetStackName(*cr.Spec.ForProvider.StackName)
	}
	if cr.Spec.ForProvider.StackPolicyBody != nil {
		res.SetStackPolicyBody(*cr.Spec.ForProvider.StackPolicyBody)
	}
	if cr.Spec.ForProvider.StackPolicyURL != nil {
		res.SetStackPolicyURL(*cr.Spec.ForProvider.StackPolicyURL)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f13 := []*svcsdk.Tag{}
		for _, f13iter := range cr.Spec.ForProvider.Tags {
			f13elem := &svcsdk.Tag{}
			if f13iter.Key != nil {
				f13elem.SetKey(*f13iter.Key)
			}
			if f13iter.Value != nil {
				f13elem.SetValue(*f13iter.Value)
			}
			f13 = append(f13, f13elem)
		}
		res.SetTags(f13)
	}
	if cr.Spec.ForProvider.TemplateBody != nil {
		res.SetTemplateBody(*cr.Spec.ForProvider.TemplateBody)
	}
	if cr.Spec.ForProvider.TemplateURL != nil {
		res.SetTemplateURL(*cr.Spec.ForProvider.TemplateURL)
	}
	if cr.Spec.ForProvider.TimeoutInMinutes != nil {
		res.SetTimeoutInMinutes(*cr.Spec.ForProvider.TimeoutInMinutes)
	}

	return res
}

// GenerateUpdateStackInput returns an update input.
func GenerateUpdateStackInput(cr *svcapitypes.Stack) *svcsdk.UpdateStackInput {
	res := &svcsdk.UpdateStackInput{}

	if cr.Spec.ForProvider.Capabilities != nil {
		f0 := []*string{}
		for _, f0iter := range cr.Spec.ForProvider.Capabilities {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		res.SetCapabilities(f0)
	}
	if cr.Spec.ForProvider.ClientRequestToken != nil {
		res.SetClientRequestToken(*cr.Spec.ForProvider.ClientRequestToken)
	}
	if cr.Spec.ForProvider.DisableRollback != nil {
		res.SetDisableRollback(*cr.Spec.ForProvider.DisableRollback)
	}
	if cr.Spec.ForProvider.NotificationARNs != nil {
		f3 := []*string{}
		for _, f3iter := range cr.Spec.ForProvider.NotificationARNs {
			var f3elem string
			f3elem = *f3iter
			f3 = append(f3, &f3elem)
		}
		res.SetNotificationARNs(f3)
	}
	if cr.Spec.ForProvider.Parameters != nil {
		f4 := []*svcsdk.Parameter{}
		for _, f4iter := range cr.Spec.ForProvider.Parameters {
			f4elem := &svcsdk.Parameter{}
			if f4iter.ParameterKey != nil {
				f4elem.SetParameterKey(*f4iter.ParameterKey)
			}
			if f4iter.ParameterValue != nil {
				f4elem.SetParameterValue(*f4iter.ParameterValue)
			}
			if f4iter.ResolvedValue != nil {
				f4elem.SetResolvedValue(*f4iter.ResolvedValue)
			}
			if f4iter.UsePreviousValue != nil {
				f4elem.SetUsePreviousValue(*f4iter.UsePreviousValue)
			}
			f4 = append(f4, f4elem)
		}
		res.SetParameters(f4)
	}
	if cr.Spec.ForProvider.ResourceTypes != nil {
		f5 := []*string{}
		for _, f5iter := range cr.Spec.ForProvider.ResourceTypes {
			var f5elem string
			f5elem = *f5iter
			f5 = append(f5, &f5elem)
		}
		res.SetResourceTypes(f5)
	}
	if cr.Spec.ForProvider.RoleARN != nil {
		res.SetRoleARN(*cr.Spec.ForProvider.RoleARN)
	}
	if cr.Spec.ForProvider.RollbackConfiguration != nil {
		f7 := &svcsdk.RollbackConfiguration{}
		if cr.Spec.ForProvider.RollbackConfiguration.MonitoringTimeInMinutes != nil {
			f7.SetMonitoringTimeInMinutes(*cr.Spec.ForProvider.RollbackConfiguration.MonitoringTimeInMinutes)
		}
		if cr.Spec.ForProvider.RollbackConfiguration.RollbackTriggers != nil {
			f7f1 := []*svcsdk.RollbackTrigger{}
			for _, f7f1iter := range cr.Spec.ForProvider.RollbackConfiguration.RollbackTriggers {
				f7f1elem := &svcsdk.RollbackTrigger{}
				if f7f1iter.ARN != nil {
					f7f1elem.SetArn(*f7f1iter.ARN)
				}
				if f7f1iter.Type != nil {
					f7f1elem.SetType(*f7f1iter.Type)
				}
				f7f1 = append(f7f1, f7f1elem)
			}
			f7.SetRollbackTriggers(f7f1)
		}
		res.SetRollbackConfiguration(f7)
	}
	if cr.Spec.ForProvider.StackName != nil {
		res.SetStackName(*cr.Spec.ForProvider.StackName)
	}
	if cr.Spec.ForProvider.StackPolicyBody != nil {
		res.SetStackPolicyBody(*cr.Spec.ForProvider.StackPolicyBody)
	}
	if cr.Spec.ForProvider.StackPolicyURL != nil {
		res.SetStackPolicyURL(*cr.Spec.ForProvider.StackPolicyURL)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f13 := []*svcsdk.Tag{}
		for _, f13iter := range cr.Spec.ForProvider.Tags {
			f13elem := &svcsdk.Tag{}
			if f13iter.Key != nil {
				f13elem.SetKey(*f13iter.Key)
			}
			if f13iter.Value != nil {
				f13elem.SetValue(*f13iter.Value)
			}
			f13 = append(f13, f13elem)
		}
		res.SetTags(f13)
	}
	if cr.Spec.ForProvider.TemplateBody != nil {
		res.SetTemplateBody(*cr.Spec.ForProvider.TemplateBody)
	}
	if cr.Spec.ForProvider.TemplateURL != nil {
		res.SetTemplateURL(*cr.Spec.ForProvider.TemplateURL)
	}

	return res
}

// GenerateDeleteStackInput returns a deletion input.
func GenerateDeleteStackInput(cr *svcapitypes.Stack) *svcsdk.DeleteStackInput {
	res := &svcsdk.DeleteStackInput{}

	if cr.Spec.ForProvider.ClientRequestToken != nil {
		res.SetClientRequestToken(*cr.Spec.ForProvider.ClientRequestToken)
	}
	if cr.Spec.ForProvider.RoleARN != nil {
		res.SetRoleARN(*cr.Spec.ForProvider.RoleARN)
	}
	if cr.Spec.ForProvider.StackName != nil {
		res.SetStackName(*cr.Spec.ForProvider.StackName)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ValidationError"
}
